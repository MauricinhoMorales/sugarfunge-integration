{
  "swagger": "2.0",
  "info": {
    "description": "API used to integrate SugarFunge with ETH",
    "version": "0.0.1",
    "title": "SugarFunge Integration API"
  },
  "externalDocs": {
    "description": "Source code",
    "url": "https://github.com/SugarFunge/sugarfunge-integration"
  },
  "host": "localhost:8000",
  "tags": [
    {
      "name": "contract",
      "description": "ETH contract method interaction",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/SugarFunge/sugarfunge-integration"
      }
    },
    {
      "name": "wrapper",
      "description": "Wrap ERC1155 Token as ERC20",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/gnosis/1155-to-20"
      }
    },
    {
      "name": "moralis",
      "description": "Moralis Web3 NFT API interaction",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/nft-api/nft-api"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/mint_nft": {
      "post": {
        "tags": [
          "contract"
        ],
        "summary": "Mint an NFT",
        "operationId": "mintNFT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MintNft"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when Minting an NFT"
          }
        }
      }
    },
    "/transfer_nft": {
      "post": {
        "tags": [
          "contract"
        ],
        "summary": "Transfer an NFT",
        "operationId": "transferNFT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferNft"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when Transfering an NFT"
          }
        }
      }
    },
    "/batch_transfer_nft": {
      "post": {
        "tags": [
          "contract"
        ],
        "summary": "Transfer multiple NFTs",
        "operationId": "batchTransferNFT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchTransferNft"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when Transfering the NFTs"
          }
        }
      }
    },
    "/wrap_1155": {
      "post": {
        "tags": [
          "wrapper"
        ],
        "summary": "Wrap an NFT",
        "operationId": "wrap1155",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WrapNft"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when wrapping an NFT"
          }
        }
      }
    },
    "/unwrap_1155": {
      "post": {
        "tags": [
          "wrapper"
        ],
        "summary": "Unwrap an NFT",
        "operationId": "unwrap1155",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnwrapNft"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when unwrapping an NFT"
          }
        }
      }
    },
    "/batch_wrap_1155": {
      "post": {
        "tags": [
          "wrapper"
        ],
        "summary": "Wrap multiple NFTs",
        "operationId": "batchWrapNFT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchWrapNft"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when wrapping mulltiple NFTs"
          }
        }
      }
    },
    "/get_nfts": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets all NFTs from the current user or address",
        "operationId": "getNfts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_contract_nfts": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the NFT count for the specified contract and the NFTs belonging to the given address for the specified contract",
        "operationId": "getContractNfts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountToken"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_nft_transfers": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the NFT transfers",
        "operationId": "getNftTransfers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_nft_transfers_by_block": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets NFT transfers by block number",
        "operationId": "getNftTransfersByBlock",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockNumber"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_all_token_ids": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the NFTs and NFTs metadata for a given token contract address",
        "description": "Gets an object with a number of NFTs and an array with NFT metadata (where available) for a given token contract address",
        "operationId": "getAllTokenIds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenAddress"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_contract_nft_transfers": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the number of NFT transfers and the NFTs transfers for a given token contract address",
        "operationId": "getContractNftTransfers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenAddress"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_nft_metadata": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the contract level metadata for the given contract",
        "operationId": "getNftMetadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenAddress"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_nft_owners": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the number of NFT owners and the NFTs metadata for a given token contract address",
        "operationId": "getNftOwners",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenAddress"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_token_id_metadata": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets data, including metadata (where available), for the given token id of the given contract address",
        "operationId": "getTokenIdMetadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenId"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    },
    "/get_token_id_owners": {
      "post": {
        "tags": [
          "moralis"
        ],
        "summary": "Gets the number of NFT owners and the NFTs metadata for the given token id of the given contract address",
        "operationId": "getTokenIdOwners",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenId"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error when interacting with the Moralis API"
          }
        }
      }
    }
  },
  "definitions": {
    "MintNft": {
      "type": "object",
      "required": [
        "account",
        "amount",
        "id",
        "data"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "xml": {
        "name": "MintNft"
      }
    },
    "TransferNft": {
      "type": "object",
      "required": [
        "from",
        "to",
        "amount",
        "id",
        "data"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            },
            "decimals": {
              "type": "integer"
            }
          }
        }
      },
      "xml": {
        "name": "TransferNft"
      }
    },
    "BatchTransferNft": {
      "type": "object",
      "required": [
        "from",
        "to",
        "amounts",
        "ids",
        "data"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "amounts": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "decimals": {
                "type": "integer"
              }
            }
          }
        }
      },
      "xml": {
        "name": "BatchTransferNft"
      }
    },
    "WrapNft": {
      "type": "object",
      "required": [
        "from",
        "amount",
        "id",
        "data"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            },
            "decimals": {
              "type": "integer"
            }
          }
        }
      },
      "xml": {
        "name": "WrapNft"
      }
    },
    "UnwrapNft": {
      "type": "object",
      "required": [
        "id",
        "amount",
        "recipient_address",
        "data"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "recipient_address": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            },
            "decimals": {
              "type": "integer"
            }
          }
        }
      },
      "xml": {
        "name": "UnwrapNft"
      }
    },
    "BatchWrapNft": {
      "type": "object",
      "required": [
        "from",
        "amounts",
        "ids",
        "data"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "amounts": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "decimals": {
                "type": "integer"
              }
            }
          }
        }
      },
      "xml": {
        "name": "BatchWrapNft"
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Address"
      }
    },
    "TokenAddress": {
      "type": "object",
      "required": [
        "token_address"
      ],
      "properties": {
        "token_address": {
          "type": "string"
        }
      },
      "xml": {
        "name": "TokenAddress"
      }
    },
    "AccountToken": {
      "type": "object",
      "required": [
        "address",
        "token_address"
      ],
      "properties": {
        "token_address": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      },
      "xml": {
        "name": "AccountToken"
      }
    },
    "TokenId": {
      "type": "object",
      "required": [
        "token_address",
        "id"
      ],
      "properties": {
        "token_address": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "TokenId"
      }
    },
    "BlockNumber": {
      "type": "object",
      "required": [
        "block"
      ],
      "properties": {
        "block": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "BlockNumber"
      }
    }
  }
}